#!/usr/bin/python2
# coding: utf-8
# Source: https://wiki.python.org/moin/BitManipulation

import struct

################################################################################
### Constantes
################################################################################

BIT   = 1
HBIT  = 4
BYTE  = 8
WORD  = 16
DWORD = 32
QWORD = 64

SIZE_REPR = {
    BYTE  : "B",
    WORD  : "H",
    DWORD : "I",
    QWORD : "Q",
}

################################################################################
### Methodes masques
################################################################################

# def mask(size, bsize):
#     """Retourne un masque de @size * @bsize bits"""
#     return (1 << (size * bsize)) - 1

# def zmask(off, boff, bsize):
#     """Retourne un masque sur une zone de @bsize bits debutant a l'offset @off * @boff bits"""
#     return (mask(1, bsize) << (off * boff))

# def rmask(mask):
#     """Retourne le masque inverse de @mask"""
#     return ~mask

# def maskb(size): return mask(size, BYTE)
# def maskw(size): return mask(size, BYTE)
# def maskd(size): return mask(size, BYTE)
# def maskq(size): return mask(size, BYTE)

# def zmaskb(off, boff): return zmask(off, boff, BYTE)
# def zmaskw(off, boff): return zmask(off, boff, WORD)
# def zmaskd(off, boff): return zmask(off, boff, DWORD)
# def zmaskq(off, boff): return zmask(off, boff, QWORD)

# def zmaskbb(off): return zmask(off, BYTE, BYTE)
# def zmaskww(off): return zmask(off, WORD, WORD)
# def zmaskdd(off): return zmask(off, DWORD, DWORD)
# def zmaskqq(off): return zmask(off, QWORD, QWORD)

################################################################################
### Methodes setters/getters bits
################################################################################

# def getb(value, offset):
#     """Retourne le bit a l'index @offset"""
#     return value & (1 << offset)

# def setb(value, offset):
#     """Active le bit a l'index @offset"""
#     return value | (1 << offset)

# def flipb(value, offset):
#     """Change le bit a l'index @offset"""
#     return value ^ (1 << offset)

# def unsetb(value, offset):
#     """Desactive le bit a l'index @offset"""
#     return value & ~(1 << offset)

################################################################################
### Methodes setters/getters generiques
################################################################################

# def zget(value, off, boff, bsize):
#     """Retourne les donnees representees par le masque(@off, @boff, @bsize) dans @value"""
#     return (value & zmask(off, boff, bsize)) >> (off * boff)

# def zset(value, data, off, boff, bsize):
#     """Remplace dans @value le masque(@off, @boff, @bsize) par @data"""
#     return (value & rmask(zmask(off, boff, bsize))) | (fit(data, bsize) << (off * boff))

# def zgetbb(value, off): return zget(value, off, BYTE, BYTE)
# def zgetww(value, off): return zget(value, off, WORD, WORD)
# def zgetdd(value, off): return zget(value, off, DWORD, DWORD)
# def zgetqq(value, off): return zget(value, off, QWORD, QWORD)

# def zsetbb(value, data, off): return zset(value, data, off, BYTE, BYTE)
# def zsetww(value, data, off): return zset(value, data, off, WORD, WORD)
# def zsetdd(value, data, off): return zset(value, data, off, DWORD, DWORD)
# def zsetqq(value, data, off): return zset(value, data, off, QWORD, QWORD)

################################################################################
### Methodes tailles
################################################################################

# def fit(value, bsize):
#     """Retourne @value sur @bsize bits"""
#     return value & mask(bsize, BIT)

# def fitb(value): return fit(value, BYTE)
# def fitw(value): return fit(value, WORD)
# def fitd(value): return fit(value, DWORD)
# def fitq(value): return fit(value, QWORD)

################################################################################
### Methodes endian
################################################################################

# def endian(value, size = DWORD):
#     """Retourne @value en modifiant son endian"""
#     if isinstance(size, int):
#         size = SIZE_REPR[size]
#     return struct.unpack("<" + size, struct.pack(">" + size, value))[0]

# def endianb(value): return endian(fitb(value), BYTE)
# def endianw(value): return endian(fitw(value), WORD)
# def endiand(value): return endian(fitd(value), DWORD)
# def endianq(value): return endian(fitq(value), QWORD)

################################################################################
### Methodes operateurs
################################################################################

# def shr(value, bsize, offset = 1, bit = False):
#     """Fonction asm shr"""
#     val = ((value & ((2 ** bsize) - 1)) >> offset)
#     return (val | zmask(bsize - offset, BIT, offset)) if bit else val

# def shl(value, bsize, offset = 1, bit = False):
#     """Fonction asm shl"""
#     val = ((value & ((2 ** bsize) - 1)) << offset) & ((2 ** bsize) - 1)
#     return (val | zmask(0, BIT, offset)) if bit else val

# def ror(value, bsize, offset = 1):
#     """Fonction asm ror"""
#     val = ((value & ((2 ** bsize) - 1)) >> offset)
#     return (val | (zget(value, 0, BIT, offset) << (bsize - offset))) & ((2 ** bsize) - 1)

# def rol(value, bsize, offset = 1):
#     """Fonction asm rol"""
#     val = ((value & ((2 ** bsize) - 1)) << offset) & ((2 ** bsize) - 1)
#     return (val | zget(value, bsize - offset, BIT, offset))

################################################################################
### Classe ZRegister
################################################################################

class ZRegister(object):
    pass

################################################################################
### Module
################################################################################

if __name__ == '__main__':
  pass
